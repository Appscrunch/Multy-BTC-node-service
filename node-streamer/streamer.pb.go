// Code generated by protoc-gen-go. DO NOT EDIT.
// source: streamer.proto

/*
Package btc is a generated protocol buffer package.

It is generated from these files:
	streamer.proto

It has these top-level messages:
	TxsToCheck
	RejectedTxs
	BTCTransaction
	AddSpOut
	Resync
	BlockHeight
	ReqDeleteSpOut
	MempoolToDelete
	WatchAddress
	MempoolRecord
	Empty
	RawTx
	AddressToResync
	UsersData
	AddressExtended
	ReplyInfo
	ServiceVersion
*/
package btc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// continious resync
type TxsToCheck struct {
	Hash []string `protobuf:"bytes,1,rep,name=Hash" json:"Hash,omitempty"`
}

func (m *TxsToCheck) Reset()                    { *m = TxsToCheck{} }
func (m *TxsToCheck) String() string            { return proto.CompactTextString(m) }
func (*TxsToCheck) ProtoMessage()               {}
func (*TxsToCheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TxsToCheck) GetHash() []string {
	if m != nil {
		return m.Hash
	}
	return nil
}

type RejectedTxs struct {
	RejectedTxs []string `protobuf:"bytes,1,rep,name=RejectedTxs" json:"RejectedTxs,omitempty"`
}

func (m *RejectedTxs) Reset()                    { *m = RejectedTxs{} }
func (m *RejectedTxs) String() string            { return proto.CompactTextString(m) }
func (*RejectedTxs) ProtoMessage()               {}
func (*RejectedTxs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RejectedTxs) GetRejectedTxs() []string {
	if m != nil {
		return m.RejectedTxs
	}
	return nil
}

type BTCTransaction struct {
	UserID        string                         `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	TxID          string                         `protobuf:"bytes,2,opt,name=txID" json:"txID,omitempty"`
	TxHash        string                         `protobuf:"bytes,3,opt,name=txHash" json:"txHash,omitempty"`
	TxOutScript   string                         `protobuf:"bytes,4,opt,name=txOutScript" json:"txOutScript,omitempty"`
	TxAddress     []string                       `protobuf:"bytes,5,rep,name=txAddress" json:"txAddress,omitempty"`
	TxStatus      int32                          `protobuf:"varint,6,opt,name=txStatus" json:"txStatus,omitempty"`
	TxOutAmount   int64                          `protobuf:"varint,7,opt,name=txOutAmount" json:"txOutAmount,omitempty"`
	BlockTime     int64                          `protobuf:"varint,8,opt,name=blockTime" json:"blockTime,omitempty"`
	BlockHeight   int64                          `protobuf:"varint,9,opt,name=blockHeight" json:"blockHeight,omitempty"`
	Confirmations int32                          `protobuf:"varint,10,opt,name=confirmations" json:"confirmations,omitempty"`
	TxFee         int64                          `protobuf:"varint,11,opt,name=txFee" json:"txFee,omitempty"`
	MempoolTime   int64                          `protobuf:"varint,12,opt,name=mempoolTime" json:"mempoolTime,omitempty"`
	TxInputs      []*BTCTransaction_AddresAmount `protobuf:"bytes,13,rep,name=txInputs" json:"txInputs,omitempty"`
	TxOutputs     []*BTCTransaction_AddresAmount `protobuf:"bytes,14,rep,name=TxOutputs" json:"TxOutputs,omitempty"`
	WalletsInput  []*BTCTransaction_WalletForTx  `protobuf:"bytes,15,rep,name=WalletsInput" json:"WalletsInput,omitempty"`
	WalletsOutput []*BTCTransaction_WalletForTx  `protobuf:"bytes,16,rep,name=WalletsOutput" json:"WalletsOutput,omitempty"`
	Resync        bool                           `protobuf:"varint,17,opt,name=resync" json:"resync,omitempty"`
}

func (m *BTCTransaction) Reset()                    { *m = BTCTransaction{} }
func (m *BTCTransaction) String() string            { return proto.CompactTextString(m) }
func (*BTCTransaction) ProtoMessage()               {}
func (*BTCTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BTCTransaction) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *BTCTransaction) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *BTCTransaction) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *BTCTransaction) GetTxOutScript() string {
	if m != nil {
		return m.TxOutScript
	}
	return ""
}

func (m *BTCTransaction) GetTxAddress() []string {
	if m != nil {
		return m.TxAddress
	}
	return nil
}

func (m *BTCTransaction) GetTxStatus() int32 {
	if m != nil {
		return m.TxStatus
	}
	return 0
}

func (m *BTCTransaction) GetTxOutAmount() int64 {
	if m != nil {
		return m.TxOutAmount
	}
	return 0
}

func (m *BTCTransaction) GetBlockTime() int64 {
	if m != nil {
		return m.BlockTime
	}
	return 0
}

func (m *BTCTransaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BTCTransaction) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *BTCTransaction) GetTxFee() int64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *BTCTransaction) GetMempoolTime() int64 {
	if m != nil {
		return m.MempoolTime
	}
	return 0
}

func (m *BTCTransaction) GetTxInputs() []*BTCTransaction_AddresAmount {
	if m != nil {
		return m.TxInputs
	}
	return nil
}

func (m *BTCTransaction) GetTxOutputs() []*BTCTransaction_AddresAmount {
	if m != nil {
		return m.TxOutputs
	}
	return nil
}

func (m *BTCTransaction) GetWalletsInput() []*BTCTransaction_WalletForTx {
	if m != nil {
		return m.WalletsInput
	}
	return nil
}

func (m *BTCTransaction) GetWalletsOutput() []*BTCTransaction_WalletForTx {
	if m != nil {
		return m.WalletsOutput
	}
	return nil
}

func (m *BTCTransaction) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

type BTCTransaction_AddresAmount struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Amount  int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *BTCTransaction_AddresAmount) Reset()                    { *m = BTCTransaction_AddresAmount{} }
func (m *BTCTransaction_AddresAmount) String() string            { return proto.CompactTextString(m) }
func (*BTCTransaction_AddresAmount) ProtoMessage()               {}
func (*BTCTransaction_AddresAmount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *BTCTransaction_AddresAmount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BTCTransaction_AddresAmount) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type BTCTransaction_WalletForTx struct {
	Userid     string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	TxOutIndex int32  `protobuf:"varint,3,opt,name=txOutIndex" json:"txOutIndex,omitempty"`
	Amount     int64  `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
}

func (m *BTCTransaction_WalletForTx) Reset()                    { *m = BTCTransaction_WalletForTx{} }
func (m *BTCTransaction_WalletForTx) String() string            { return proto.CompactTextString(m) }
func (*BTCTransaction_WalletForTx) ProtoMessage()               {}
func (*BTCTransaction_WalletForTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *BTCTransaction_WalletForTx) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *BTCTransaction_WalletForTx) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BTCTransaction_WalletForTx) GetTxOutIndex() int32 {
	if m != nil {
		return m.TxOutIndex
	}
	return 0
}

func (m *BTCTransaction_WalletForTx) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type AddSpOut struct {
	TxID         string `protobuf:"bytes,1,opt,name=txID" json:"txID,omitempty"`
	TxOutID      int32  `protobuf:"varint,2,opt,name=txOutID" json:"txOutID,omitempty"`
	TxOutAmount  int64  `protobuf:"varint,3,opt,name=txOutAmount" json:"txOutAmount,omitempty"`
	TxOutScript  string `protobuf:"bytes,4,opt,name=txOutScript" json:"txOutScript,omitempty"`
	Address      string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	UserID       string `protobuf:"bytes,6,opt,name=userID" json:"userID,omitempty"`
	TxStatus     int32  `protobuf:"varint,7,opt,name=txStatus" json:"txStatus,omitempty"`
	WalletIndex  int32  `protobuf:"varint,8,opt,name=walletIndex" json:"walletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,9,opt,name=addressIndex" json:"addressIndex,omitempty"`
}

func (m *AddSpOut) Reset()                    { *m = AddSpOut{} }
func (m *AddSpOut) String() string            { return proto.CompactTextString(m) }
func (*AddSpOut) ProtoMessage()               {}
func (*AddSpOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddSpOut) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *AddSpOut) GetTxOutID() int32 {
	if m != nil {
		return m.TxOutID
	}
	return 0
}

func (m *AddSpOut) GetTxOutAmount() int64 {
	if m != nil {
		return m.TxOutAmount
	}
	return 0
}

func (m *AddSpOut) GetTxOutScript() string {
	if m != nil {
		return m.TxOutScript
	}
	return ""
}

func (m *AddSpOut) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddSpOut) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddSpOut) GetTxStatus() int32 {
	if m != nil {
		return m.TxStatus
	}
	return 0
}

func (m *AddSpOut) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddSpOut) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type Resync struct {
	Txs             []*BTCTransaction `protobuf:"bytes,1,rep,name=Txs" json:"Txs,omitempty"`
	SpOuts          []*AddSpOut       `protobuf:"bytes,2,rep,name=SpOuts" json:"SpOuts,omitempty"`
	SpOutDelete     []*ReqDeleteSpOut `protobuf:"bytes,3,rep,name=SpOutDelete" json:"SpOutDelete,omitempty"`
	DeleteFromQueue string            `protobuf:"bytes,4,opt,name=DeleteFromQueue" json:"DeleteFromQueue,omitempty"`
}

func (m *Resync) Reset()                    { *m = Resync{} }
func (m *Resync) String() string            { return proto.CompactTextString(m) }
func (*Resync) ProtoMessage()               {}
func (*Resync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Resync) GetTxs() []*BTCTransaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Resync) GetSpOuts() []*AddSpOut {
	if m != nil {
		return m.SpOuts
	}
	return nil
}

func (m *Resync) GetSpOutDelete() []*ReqDeleteSpOut {
	if m != nil {
		return m.SpOutDelete
	}
	return nil
}

func (m *Resync) GetDeleteFromQueue() string {
	if m != nil {
		return m.DeleteFromQueue
	}
	return ""
}

type BlockHeight struct {
	Height int64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
}

func (m *BlockHeight) Reset()                    { *m = BlockHeight{} }
func (m *BlockHeight) String() string            { return proto.CompactTextString(m) }
func (*BlockHeight) ProtoMessage()               {}
func (*BlockHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BlockHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ReqDeleteSpOut struct {
	UserID  string `protobuf:"bytes,1,opt,name=userID" json:"userID,omitempty"`
	TxID    string `protobuf:"bytes,2,opt,name=txID" json:"txID,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *ReqDeleteSpOut) Reset()                    { *m = ReqDeleteSpOut{} }
func (m *ReqDeleteSpOut) String() string            { return proto.CompactTextString(m) }
func (*ReqDeleteSpOut) ProtoMessage()               {}
func (*ReqDeleteSpOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReqDeleteSpOut) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ReqDeleteSpOut) GetTxID() string {
	if m != nil {
		return m.TxID
	}
	return ""
}

func (m *ReqDeleteSpOut) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MempoolToDelete struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *MempoolToDelete) Reset()                    { *m = MempoolToDelete{} }
func (m *MempoolToDelete) String() string            { return proto.CompactTextString(m) }
func (*MempoolToDelete) ProtoMessage()               {}
func (*MempoolToDelete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MempoolToDelete) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type WatchAddress struct {
	Address      string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=userID" json:"userID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,3,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,4,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
}

func (m *WatchAddress) Reset()                    { *m = WatchAddress{} }
func (m *WatchAddress) String() string            { return proto.CompactTextString(m) }
func (*WatchAddress) ProtoMessage()               {}
func (*WatchAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WatchAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WatchAddress) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *WatchAddress) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *WatchAddress) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type MempoolRecord struct {
	Category int32  `protobuf:"varint,1,opt,name=category" json:"category,omitempty"`
	HashTX   string `protobuf:"bytes,2,opt,name=hashTX" json:"hashTX,omitempty"`
}

func (m *MempoolRecord) Reset()                    { *m = MempoolRecord{} }
func (m *MempoolRecord) String() string            { return proto.CompactTextString(m) }
func (*MempoolRecord) ProtoMessage()               {}
func (*MempoolRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MempoolRecord) GetCategory() int32 {
	if m != nil {
		return m.Category
	}
	return 0
}

func (m *MempoolRecord) GetHashTX() string {
	if m != nil {
		return m.HashTX
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type RawTx struct {
	Transaction string `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *RawTx) Reset()                    { *m = RawTx{} }
func (m *RawTx) String() string            { return proto.CompactTextString(m) }
func (*RawTx) ProtoMessage()               {}
func (*RawTx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RawTx) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

type AddressToResync struct {
	Address      string `protobuf:"bytes,1,opt,name=Address" json:"Address,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,3,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,4,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
}

func (m *AddressToResync) Reset()                    { *m = AddressToResync{} }
func (m *AddressToResync) String() string            { return proto.CompactTextString(m) }
func (*AddressToResync) ProtoMessage()               {}
func (*AddressToResync) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AddressToResync) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressToResync) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddressToResync) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddressToResync) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type UsersData struct {
	Map map[string]*AddressExtended `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UsersData) Reset()                    { *m = UsersData{} }
func (m *UsersData) String() string            { return proto.CompactTextString(m) }
func (*UsersData) ProtoMessage()               {}
func (*UsersData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UsersData) GetMap() map[string]*AddressExtended {
	if m != nil {
		return m.Map
	}
	return nil
}

type AddressExtended struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	WalletIndex  int32  `protobuf:"varint,2,opt,name=WalletIndex" json:"WalletIndex,omitempty"`
	AddressIndex int32  `protobuf:"varint,3,opt,name=AddressIndex" json:"AddressIndex,omitempty"`
}

func (m *AddressExtended) Reset()                    { *m = AddressExtended{} }
func (m *AddressExtended) String() string            { return proto.CompactTextString(m) }
func (*AddressExtended) ProtoMessage()               {}
func (*AddressExtended) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddressExtended) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddressExtended) GetWalletIndex() int32 {
	if m != nil {
		return m.WalletIndex
	}
	return 0
}

func (m *AddressExtended) GetAddressIndex() int32 {
	if m != nil {
		return m.AddressIndex
	}
	return 0
}

type ReplyInfo struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ReplyInfo) Reset()                    { *m = ReplyInfo{} }
func (m *ReplyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReplyInfo) ProtoMessage()               {}
func (*ReplyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReplyInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ServiceVersion struct {
	Branch    string `protobuf:"bytes,1,opt,name=branch" json:"branch,omitempty"`
	Commit    string `protobuf:"bytes,2,opt,name=commit" json:"commit,omitempty"`
	Buildtime string `protobuf:"bytes,3,opt,name=buildtime" json:"buildtime,omitempty"`
	Lasttag   string `protobuf:"bytes,4,opt,name=lasttag" json:"lasttag,omitempty"`
}

func (m *ServiceVersion) Reset()                    { *m = ServiceVersion{} }
func (m *ServiceVersion) String() string            { return proto.CompactTextString(m) }
func (*ServiceVersion) ProtoMessage()               {}
func (*ServiceVersion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ServiceVersion) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func (m *ServiceVersion) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *ServiceVersion) GetBuildtime() string {
	if m != nil {
		return m.Buildtime
	}
	return ""
}

func (m *ServiceVersion) GetLasttag() string {
	if m != nil {
		return m.Lasttag
	}
	return ""
}

func init() {
	proto.RegisterType((*TxsToCheck)(nil), "btc.TxsToCheck")
	proto.RegisterType((*RejectedTxs)(nil), "btc.RejectedTxs")
	proto.RegisterType((*BTCTransaction)(nil), "btc.BTCTransaction")
	proto.RegisterType((*BTCTransaction_AddresAmount)(nil), "btc.BTCTransaction.AddresAmount")
	proto.RegisterType((*BTCTransaction_WalletForTx)(nil), "btc.BTCTransaction.WalletForTx")
	proto.RegisterType((*AddSpOut)(nil), "btc.AddSpOut")
	proto.RegisterType((*Resync)(nil), "btc.Resync")
	proto.RegisterType((*BlockHeight)(nil), "btc.BlockHeight")
	proto.RegisterType((*ReqDeleteSpOut)(nil), "btc.ReqDeleteSpOut")
	proto.RegisterType((*MempoolToDelete)(nil), "btc.MempoolToDelete")
	proto.RegisterType((*WatchAddress)(nil), "btc.WatchAddress")
	proto.RegisterType((*MempoolRecord)(nil), "btc.MempoolRecord")
	proto.RegisterType((*Empty)(nil), "btc.Empty")
	proto.RegisterType((*RawTx)(nil), "btc.RawTx")
	proto.RegisterType((*AddressToResync)(nil), "btc.AddressToResync")
	proto.RegisterType((*UsersData)(nil), "btc.UsersData")
	proto.RegisterType((*AddressExtended)(nil), "btc.AddressExtended")
	proto.RegisterType((*ReplyInfo)(nil), "btc.ReplyInfo")
	proto.RegisterType((*ServiceVersion)(nil), "btc.ServiceVersion")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NodeCommuunications service

type NodeCommuunicationsClient interface {
	ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error)
	EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error)
	SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error)
	EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error)
	EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error)
	EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error)
	EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error)
	EventDeleteSpendableOut(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteSpendableOutClient, error)
	EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventNewBlockClient, error)
	EventAddSpendableOut(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddSpendableOutClient, error)
	NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error)
	ResyncAddress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_ResyncAddressClient, error)
	CheckRejectTxs(ctx context.Context, in *TxsToCheck, opts ...grpc.CallOption) (*RejectedTxs, error)
}

type nodeCommuunicationsClient struct {
	cc *grpc.ClientConn
}

func NewNodeCommuunicationsClient(cc *grpc.ClientConn) NodeCommuunicationsClient {
	return &nodeCommuunicationsClient{cc}
}

func (c *nodeCommuunicationsClient) ServiceInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServiceVersion, error) {
	out := new(ServiceVersion)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/ServiceInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventInitialAdd(ctx context.Context, in *UsersData, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/EventInitialAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) SyncState(ctx context.Context, in *BlockHeight, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/SyncState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventAddNewAddress(ctx context.Context, in *WatchAddress, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/EventAddNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetBlockHeight(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BlockHeight, error) {
	out := new(BlockHeight)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/EventGetBlockHeight", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventGetAllMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventGetAllMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[0], c.cc, "/btc.NodeCommuunications/EventGetAllMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventGetAllMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventGetAllMempoolClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventGetAllMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventGetAllMempoolClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventAddMempoolRecord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddMempoolRecordClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[1], c.cc, "/btc.NodeCommuunications/EventAddMempoolRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventAddMempoolRecordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventAddMempoolRecordClient interface {
	Recv() (*MempoolRecord, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventAddMempoolRecordClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordClient) Recv() (*MempoolRecord, error) {
	m := new(MempoolRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventDeleteMempool(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteMempoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[2], c.cc, "/btc.NodeCommuunications/EventDeleteMempool", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventDeleteMempoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventDeleteMempoolClient interface {
	Recv() (*MempoolToDelete, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventDeleteMempoolClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventDeleteMempoolClient) Recv() (*MempoolToDelete, error) {
	m := new(MempoolToDelete)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventResyncAddress(ctx context.Context, in *AddressToResync, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/EventResyncAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventSendRawTx(ctx context.Context, in *RawTx, opts ...grpc.CallOption) (*ReplyInfo, error) {
	out := new(ReplyInfo)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/EventSendRawTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeCommuunicationsClient) EventDeleteSpendableOut(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventDeleteSpendableOutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[3], c.cc, "/btc.NodeCommuunications/EventDeleteSpendableOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventDeleteSpendableOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventDeleteSpendableOutClient interface {
	Recv() (*ReqDeleteSpOut, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventDeleteSpendableOutClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventDeleteSpendableOutClient) Recv() (*ReqDeleteSpOut, error) {
	m := new(ReqDeleteSpOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventNewBlock(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventNewBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[4], c.cc, "/btc.NodeCommuunications/EventNewBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventNewBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventNewBlockClient interface {
	Recv() (*BlockHeight, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventNewBlockClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventNewBlockClient) Recv() (*BlockHeight, error) {
	m := new(BlockHeight)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) EventAddSpendableOut(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_EventAddSpendableOutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[5], c.cc, "/btc.NodeCommuunications/EventAddSpendableOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsEventAddSpendableOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_EventAddSpendableOutClient interface {
	Recv() (*AddSpOut, error)
	grpc.ClientStream
}

type nodeCommuunicationsEventAddSpendableOutClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsEventAddSpendableOutClient) Recv() (*AddSpOut, error) {
	m := new(AddSpOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) NewTx(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_NewTxClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[6], c.cc, "/btc.NodeCommuunications/NewTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsNewTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_NewTxClient interface {
	Recv() (*BTCTransaction, error)
	grpc.ClientStream
}

type nodeCommuunicationsNewTxClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsNewTxClient) Recv() (*BTCTransaction, error) {
	m := new(BTCTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) ResyncAddress(ctx context.Context, in *Empty, opts ...grpc.CallOption) (NodeCommuunications_ResyncAddressClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_NodeCommuunications_serviceDesc.Streams[7], c.cc, "/btc.NodeCommuunications/ResyncAddress", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeCommuunicationsResyncAddressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeCommuunications_ResyncAddressClient interface {
	Recv() (*Resync, error)
	grpc.ClientStream
}

type nodeCommuunicationsResyncAddressClient struct {
	grpc.ClientStream
}

func (x *nodeCommuunicationsResyncAddressClient) Recv() (*Resync, error) {
	m := new(Resync)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nodeCommuunicationsClient) CheckRejectTxs(ctx context.Context, in *TxsToCheck, opts ...grpc.CallOption) (*RejectedTxs, error) {
	out := new(RejectedTxs)
	err := grpc.Invoke(ctx, "/btc.NodeCommuunications/CheckRejectTxs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeCommuunications service

type NodeCommuunicationsServer interface {
	ServiceInfo(context.Context, *Empty) (*ServiceVersion, error)
	EventInitialAdd(context.Context, *UsersData) (*ReplyInfo, error)
	SyncState(context.Context, *BlockHeight) (*ReplyInfo, error)
	EventAddNewAddress(context.Context, *WatchAddress) (*ReplyInfo, error)
	EventGetBlockHeight(context.Context, *Empty) (*BlockHeight, error)
	EventGetAllMempool(*Empty, NodeCommuunications_EventGetAllMempoolServer) error
	EventAddMempoolRecord(*Empty, NodeCommuunications_EventAddMempoolRecordServer) error
	EventDeleteMempool(*Empty, NodeCommuunications_EventDeleteMempoolServer) error
	EventResyncAddress(context.Context, *AddressToResync) (*ReplyInfo, error)
	EventSendRawTx(context.Context, *RawTx) (*ReplyInfo, error)
	EventDeleteSpendableOut(*Empty, NodeCommuunications_EventDeleteSpendableOutServer) error
	EventNewBlock(*Empty, NodeCommuunications_EventNewBlockServer) error
	EventAddSpendableOut(*Empty, NodeCommuunications_EventAddSpendableOutServer) error
	NewTx(*Empty, NodeCommuunications_NewTxServer) error
	ResyncAddress(*Empty, NodeCommuunications_ResyncAddressServer) error
	CheckRejectTxs(context.Context, *TxsToCheck) (*RejectedTxs, error)
}

func RegisterNodeCommuunicationsServer(s *grpc.Server, srv NodeCommuunicationsServer) {
	s.RegisterService(&_NodeCommuunications_serviceDesc, srv)
}

func _NodeCommuunications_ServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).ServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/ServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).ServiceInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventInitialAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/EventInitialAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventInitialAdd(ctx, req.(*UsersData))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_SyncState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).SyncState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/SyncState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).SyncState(ctx, req.(*BlockHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventAddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/EventAddNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventAddNewAddress(ctx, req.(*WatchAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/EventGetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventGetBlockHeight(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventGetAllMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventGetAllMempool(m, &nodeCommuunicationsEventGetAllMempoolServer{stream})
}

type NodeCommuunications_EventGetAllMempoolServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventGetAllMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventGetAllMempoolServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventAddMempoolRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventAddMempoolRecord(m, &nodeCommuunicationsEventAddMempoolRecordServer{stream})
}

type NodeCommuunications_EventAddMempoolRecordServer interface {
	Send(*MempoolRecord) error
	grpc.ServerStream
}

type nodeCommuunicationsEventAddMempoolRecordServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventAddMempoolRecordServer) Send(m *MempoolRecord) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventDeleteMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventDeleteMempool(m, &nodeCommuunicationsEventDeleteMempoolServer{stream})
}

type NodeCommuunications_EventDeleteMempoolServer interface {
	Send(*MempoolToDelete) error
	grpc.ServerStream
}

type nodeCommuunicationsEventDeleteMempoolServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventDeleteMempoolServer) Send(m *MempoolToDelete) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventResyncAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressToResync)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/EventResyncAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventResyncAddress(ctx, req.(*AddressToResync))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventSendRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/EventSendRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).EventSendRawTx(ctx, req.(*RawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeCommuunications_EventDeleteSpendableOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventDeleteSpendableOut(m, &nodeCommuunicationsEventDeleteSpendableOutServer{stream})
}

type NodeCommuunications_EventDeleteSpendableOutServer interface {
	Send(*ReqDeleteSpOut) error
	grpc.ServerStream
}

type nodeCommuunicationsEventDeleteSpendableOutServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventDeleteSpendableOutServer) Send(m *ReqDeleteSpOut) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventNewBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventNewBlock(m, &nodeCommuunicationsEventNewBlockServer{stream})
}

type NodeCommuunications_EventNewBlockServer interface {
	Send(*BlockHeight) error
	grpc.ServerStream
}

type nodeCommuunicationsEventNewBlockServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventNewBlockServer) Send(m *BlockHeight) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_EventAddSpendableOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).EventAddSpendableOut(m, &nodeCommuunicationsEventAddSpendableOutServer{stream})
}

type NodeCommuunications_EventAddSpendableOutServer interface {
	Send(*AddSpOut) error
	grpc.ServerStream
}

type nodeCommuunicationsEventAddSpendableOutServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsEventAddSpendableOutServer) Send(m *AddSpOut) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_NewTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).NewTx(m, &nodeCommuunicationsNewTxServer{stream})
}

type NodeCommuunications_NewTxServer interface {
	Send(*BTCTransaction) error
	grpc.ServerStream
}

type nodeCommuunicationsNewTxServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsNewTxServer) Send(m *BTCTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_ResyncAddress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeCommuunicationsServer).ResyncAddress(m, &nodeCommuunicationsResyncAddressServer{stream})
}

type NodeCommuunications_ResyncAddressServer interface {
	Send(*Resync) error
	grpc.ServerStream
}

type nodeCommuunicationsResyncAddressServer struct {
	grpc.ServerStream
}

func (x *nodeCommuunicationsResyncAddressServer) Send(m *Resync) error {
	return x.ServerStream.SendMsg(m)
}

func _NodeCommuunications_CheckRejectTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxsToCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeCommuunicationsServer).CheckRejectTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/btc.NodeCommuunications/CheckRejectTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeCommuunicationsServer).CheckRejectTxs(ctx, req.(*TxsToCheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeCommuunications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "btc.NodeCommuunications",
	HandlerType: (*NodeCommuunicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceInfo",
			Handler:    _NodeCommuunications_ServiceInfo_Handler,
		},
		{
			MethodName: "EventInitialAdd",
			Handler:    _NodeCommuunications_EventInitialAdd_Handler,
		},
		{
			MethodName: "SyncState",
			Handler:    _NodeCommuunications_SyncState_Handler,
		},
		{
			MethodName: "EventAddNewAddress",
			Handler:    _NodeCommuunications_EventAddNewAddress_Handler,
		},
		{
			MethodName: "EventGetBlockHeight",
			Handler:    _NodeCommuunications_EventGetBlockHeight_Handler,
		},
		{
			MethodName: "EventResyncAddress",
			Handler:    _NodeCommuunications_EventResyncAddress_Handler,
		},
		{
			MethodName: "EventSendRawTx",
			Handler:    _NodeCommuunications_EventSendRawTx_Handler,
		},
		{
			MethodName: "CheckRejectTxs",
			Handler:    _NodeCommuunications_CheckRejectTxs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventGetAllMempool",
			Handler:       _NodeCommuunications_EventGetAllMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventAddMempoolRecord",
			Handler:       _NodeCommuunications_EventAddMempoolRecord_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventDeleteMempool",
			Handler:       _NodeCommuunications_EventDeleteMempool_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventDeleteSpendableOut",
			Handler:       _NodeCommuunications_EventDeleteSpendableOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventNewBlock",
			Handler:       _NodeCommuunications_EventNewBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventAddSpendableOut",
			Handler:       _NodeCommuunications_EventAddSpendableOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewTx",
			Handler:       _NodeCommuunications_NewTx_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResyncAddress",
			Handler:       _NodeCommuunications_ResyncAddress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamer.proto",
}

func init() { proto.RegisterFile("streamer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x7a, 0xe3, 0xdb, 0x71, 0x6c, 0xb7, 0xd3, 0xd0, 0xae, 0x2c, 0x04, 0xd6, 0x8a, 0x48,
	0x2e, 0x42, 0x6e, 0x48, 0x15, 0xa9, 0x94, 0xaa, 0xc2, 0xcd, 0xa5, 0xb5, 0x44, 0x53, 0xb1, 0x76,
	0x0b, 0xaf, 0xeb, 0xdd, 0x69, 0xbc, 0x64, 0x2f, 0x66, 0x77, 0x36, 0x59, 0xbf, 0x23, 0x24, 0xde,
	0xf8, 0x37, 0xfc, 0x0a, 0x7e, 0x12, 0x12, 0x9a, 0x33, 0xb3, 0xf6, 0x4c, 0x63, 0x9a, 0x20, 0xf1,
	0x36, 0xe7, 0xcc, 0xb9, 0x7e, 0xe7, 0x32, 0xbb, 0xd0, 0xc9, 0x58, 0x4a, 0xdd, 0x88, 0xa6, 0xc3,
	0x45, 0x9a, 0xb0, 0x84, 0x98, 0x33, 0xe6, 0xd9, 0x7d, 0x80, 0x69, 0x91, 0x4d, 0x93, 0xa3, 0x39,
	0xf5, 0x2e, 0x08, 0x81, 0xed, 0x57, 0x6e, 0x36, 0xb7, 0x8c, 0xbe, 0x39, 0x68, 0x3a, 0x78, 0xb6,
	0x1f, 0x41, 0xcb, 0xa1, 0x3f, 0x53, 0x8f, 0x51, 0x7f, 0x5a, 0x64, 0xa4, 0xaf, 0x91, 0x52, 0x52,
	0x65, 0xd9, 0x7f, 0xd5, 0xa0, 0xf3, 0x62, 0x7a, 0x34, 0x4d, 0xdd, 0x38, 0x73, 0x3d, 0x16, 0x24,
	0x31, 0xb9, 0x0f, 0xb5, 0x3c, 0xa3, 0xe9, 0xf8, 0xd8, 0x32, 0xfa, 0xc6, 0xa0, 0xe9, 0x48, 0x8a,
	0xfb, 0x63, 0xc5, 0xf8, 0xd8, 0xaa, 0x20, 0x17, 0xcf, 0x5c, 0x96, 0x15, 0x18, 0x85, 0x29, 0x64,
	0x05, 0xc5, 0x1d, 0xb3, 0xe2, 0x4d, 0xce, 0x26, 0x5e, 0x1a, 0x2c, 0x98, 0xb5, 0x8d, 0x97, 0x2a,
	0x8b, 0x7c, 0x0a, 0x4d, 0x56, 0x8c, 0x7c, 0x3f, 0xa5, 0x59, 0x66, 0x55, 0x31, 0xb0, 0x35, 0x83,
	0xf4, 0xa0, 0xc1, 0x8a, 0x09, 0x73, 0x59, 0x9e, 0x59, 0xb5, 0xbe, 0x31, 0xa8, 0x3a, 0x2b, 0x7a,
	0x65, 0x7b, 0x14, 0x25, 0x79, 0xcc, 0xac, 0x7a, 0xdf, 0x18, 0x98, 0x8e, 0xca, 0xe2, 0xb6, 0x67,
	0x61, 0xe2, 0x5d, 0x4c, 0x83, 0x88, 0x5a, 0x0d, 0xbc, 0x5f, 0x33, 0xb8, 0x3e, 0x12, 0xaf, 0x68,
	0x70, 0x3e, 0x67, 0x56, 0x53, 0xe8, 0x2b, 0x2c, 0xf2, 0x05, 0xb4, 0xbd, 0x24, 0x7e, 0x1f, 0xa4,
	0x91, 0xcb, 0x11, 0xc9, 0x2c, 0xc0, 0x10, 0x74, 0x26, 0xd9, 0x85, 0x2a, 0x2b, 0x4e, 0x29, 0xb5,
	0x5a, 0x68, 0x41, 0x10, 0xdc, 0x7a, 0x44, 0xa3, 0x45, 0x92, 0x84, 0xe8, 0x7d, 0x47, 0x58, 0x57,
	0x58, 0xe4, 0x19, 0xcf, 0x6d, 0x1c, 0x2f, 0x72, 0x96, 0x59, 0xed, 0xbe, 0x39, 0x68, 0x1d, 0xf4,
	0x87, 0x33, 0xe6, 0x0d, 0xf5, 0x32, 0x0c, 0x05, 0x14, 0x22, 0x23, 0x67, 0xa5, 0x41, 0x9e, 0x43,
	0x73, 0xca, 0x53, 0x45, 0xf5, 0xce, 0x2d, 0xd5, 0xd7, 0x2a, 0xe4, 0x08, 0x76, 0x7e, 0x74, 0xc3,
	0x90, 0xb2, 0x0c, 0x0d, 0x5a, 0x5d, 0x34, 0xf1, 0xf9, 0x26, 0x13, 0x42, 0xee, 0x34, 0x49, 0xa7,
	0x85, 0xa3, 0x29, 0x91, 0x13, 0x68, 0x4b, 0x5a, 0x98, 0xb5, 0xee, 0xdc, 0xce, 0x8a, 0xae, 0xc5,
	0xbb, 0x27, 0xa5, 0xd9, 0x32, 0xf6, 0xac, 0xbb, 0x7d, 0x63, 0xd0, 0x70, 0x24, 0xd5, 0xfb, 0x0e,
	0x76, 0xd4, 0xf0, 0x89, 0x05, 0x75, 0x57, 0x76, 0x8a, 0x68, 0xc9, 0x92, 0xe4, 0x16, 0x5c, 0xd1,
	0x06, 0x15, 0x04, 0x5a, 0x52, 0xbd, 0x2b, 0x68, 0x29, 0x7e, 0xcb, 0x96, 0x0e, 0x7c, 0xb5, 0xa5,
	0x03, 0x5f, 0x35, 0x5c, 0xd1, 0x0d, 0x7f, 0x06, 0x80, 0x1d, 0x35, 0x8e, 0x7d, 0x5a, 0x60, 0x73,
	0x57, 0x1d, 0x85, 0xa3, 0x38, 0xde, 0x56, 0x1d, 0xdb, 0x7f, 0x54, 0xa0, 0x31, 0xf2, 0xfd, 0xc9,
	0xe2, 0x4d, 0xce, 0x56, 0x13, 0x63, 0x28, 0x13, 0x63, 0x41, 0x5d, 0x98, 0x11, 0x83, 0x54, 0x75,
	0x4a, 0xf2, 0xc3, 0xbe, 0x36, 0xaf, 0xf7, 0xf5, 0xcd, 0x53, 0xa5, 0x24, 0x54, 0xbd, 0x86, 0x94,
	0x9c, 0xea, 0x9a, 0x36, 0xd5, 0xea, 0xa4, 0xd5, 0xaf, 0x4f, 0xda, 0x15, 0xa2, 0x28, 0x50, 0x68,
	0xe0, 0xb5, 0xca, 0x22, 0x36, 0xec, 0x48, 0x07, 0x42, 0xa4, 0x89, 0x22, 0x1a, 0xcf, 0xfe, 0xd3,
	0x80, 0x9a, 0x83, 0x85, 0x25, 0x7b, 0x60, 0x96, 0x7b, 0xa8, 0x75, 0x70, 0x6f, 0x43, 0xb7, 0x38,
	0xfc, 0x9e, 0xec, 0x41, 0x0d, 0x01, 0xe4, 0x55, 0xe1, 0x92, 0x6d, 0x94, 0x2c, 0x61, 0x75, 0xe4,
	0x25, 0x39, 0x84, 0x16, 0x9e, 0x8e, 0x69, 0x48, 0x19, 0xb5, 0x4c, 0xc5, 0xaa, 0x43, 0x7f, 0x11,
	0x5c, 0xa1, 0xa1, 0xca, 0x91, 0x01, 0x74, 0xc5, 0xe9, 0x34, 0x4d, 0xa2, 0x1f, 0x72, 0x9a, 0x53,
	0x89, 0xe4, 0x87, 0x6c, 0x7b, 0x0f, 0x5a, 0x2f, 0x94, 0xb5, 0x70, 0x1f, 0x6a, 0x73, 0xb1, 0x33,
	0x0c, 0x51, 0x73, 0x41, 0xd9, 0xef, 0xa0, 0xa3, 0xfb, 0xfb, 0x4f, 0x2b, 0x54, 0x29, 0x99, 0xa9,
	0x95, 0xcc, 0xde, 0x83, 0xee, 0x6b, 0xb9, 0x37, 0x12, 0x19, 0x3b, 0x81, 0xed, 0xb9, 0xd8, 0xf9,
	0x68, 0x80, 0x9f, 0xed, 0xdf, 0x0c, 0x3e, 0xd2, 0xcc, 0x9b, 0x97, 0xcb, 0xf3, 0xa3, 0xe3, 0x22,
	0xe3, 0xaa, 0x68, 0x71, 0xf5, 0xcb, 0x71, 0x51, 0xdb, 0x5d, 0x65, 0xf1, 0x42, 0x8f, 0xd4, 0x42,
	0x6f, 0x8b, 0x42, 0xab, 0x3c, 0xfb, 0x08, 0xda, 0x32, 0x5e, 0x87, 0x7a, 0x49, 0xea, 0xf3, 0xde,
	0xf2, 0x5c, 0x46, 0xcf, 0x93, 0x74, 0x89, 0x91, 0x54, 0x9d, 0x15, 0x8d, 0x60, 0xba, 0xd9, 0x7c,
	0xfa, 0x53, 0x19, 0x8a, 0xa0, 0xec, 0x3a, 0x54, 0x4f, 0xa2, 0x05, 0x5b, 0xda, 0x0f, 0xa1, 0xea,
	0xb8, 0x57, 0xd3, 0x02, 0xbb, 0x7e, 0xdd, 0x21, 0x32, 0x25, 0x95, 0x65, 0xff, 0x6e, 0x40, 0x57,
	0x46, 0x32, 0x4d, 0x64, 0xab, 0x59, 0x50, 0x1f, 0xe9, 0x20, 0x8c, 0xd6, 0x20, 0xbc, 0xd5, 0x40,
	0x78, 0xfb, 0x7f, 0x82, 0xf0, 0xab, 0x01, 0x4d, 0x6e, 0x30, 0x3b, 0x76, 0x99, 0x4b, 0x1e, 0x82,
	0x19, 0xb9, 0x0b, 0xd9, 0xf0, 0x0f, 0xb0, 0x35, 0x57, 0x97, 0xc3, 0xd7, 0xee, 0xe2, 0x24, 0x66,
	0xe9, 0xd2, 0xe1, 0x32, 0xbd, 0xef, 0xa1, 0x51, 0x32, 0xc8, 0x1d, 0x30, 0x2f, 0xe8, 0x52, 0x06,
	0xce, 0x8f, 0xe4, 0x4b, 0xa8, 0x5e, 0xba, 0x61, 0x4e, 0x31, 0xe6, 0xd6, 0xc1, 0x6e, 0x39, 0x11,
	0xdc, 0xf1, 0x49, 0xc1, 0x68, 0xec, 0x53, 0xdf, 0x11, 0x22, 0x4f, 0x2b, 0x4f, 0x0c, 0x3b, 0x59,
	0x21, 0x52, 0xde, 0x2a, 0x79, 0x1b, 0x1f, 0xcb, 0xbb, 0x72, 0x73, 0xde, 0xe6, 0x86, 0xbc, 0xf7,
	0xa0, 0xe9, 0xd0, 0x45, 0xb8, 0x1c, 0xc7, 0xef, 0x13, 0x0e, 0x7e, 0x44, 0xb3, 0xcc, 0x3d, 0xa7,
	0x25, 0xf8, 0x92, 0xb4, 0x0b, 0xe8, 0x4c, 0x68, 0x7a, 0x19, 0x78, 0xf4, 0x1d, 0x4d, 0x33, 0xf9,
	0xb9, 0x31, 0x4b, 0xdd, 0xd8, 0x2b, 0x9b, 0x5a, 0x52, 0x9c, 0xef, 0x25, 0x51, 0x14, 0xb0, 0xb2,
	0x4c, 0x82, 0xc2, 0xc7, 0x3d, 0x0f, 0x42, 0x9f, 0xf1, 0xe7, 0x55, 0x4c, 0xcc, 0x9a, 0xc1, 0x3d,
	0x87, 0x6e, 0xc6, 0x98, 0x7b, 0x2e, 0x87, 0xba, 0x24, 0x0f, 0xfe, 0xae, 0xc1, 0xbd, 0xb3, 0xc4,
	0xa7, 0x47, 0x49, 0x14, 0xe5, 0x79, 0x1c, 0x78, 0xf2, 0x19, 0xdf, 0x87, 0x96, 0x8c, 0x08, 0x43,
	0x07, 0x44, 0x16, 0x5b, 0xb0, 0x27, 0x76, 0x89, 0x1e, 0xaf, 0xbd, 0x45, 0x1e, 0x43, 0xf7, 0xe4,
	0x92, 0xc6, 0x6c, 0x1c, 0x07, 0x2c, 0x70, 0xc3, 0x91, 0xef, 0x93, 0x8e, 0x5e, 0xda, 0x5e, 0x47,
	0x6e, 0x21, 0x09, 0x88, 0xbd, 0x45, 0x1e, 0x41, 0x73, 0xb2, 0x8c, 0x3d, 0xbe, 0x59, 0x29, 0xb9,
	0x23, 0x56, 0xdf, 0x7a, 0xb7, 0x6c, 0x50, 0xf8, 0x06, 0x08, 0x7a, 0x19, 0xf9, 0xfe, 0x19, 0xbd,
	0x2a, 0x9b, 0xf7, 0x2e, 0xca, 0xa9, 0xe3, 0xbe, 0x41, 0xf5, 0x10, 0xee, 0xa1, 0xea, 0x4b, 0xca,
	0xd4, 0xfd, 0xa5, 0xa6, 0x76, 0x2d, 0x02, 0x7b, 0x8b, 0x3c, 0x91, 0x1e, 0x5f, 0x52, 0x36, 0x0a,
	0x43, 0x39, 0xca, 0x9a, 0x16, 0xc1, 0xb3, 0x36, 0xe4, 0xf6, 0xd6, 0xbe, 0x41, 0xbe, 0x85, 0x4f,
	0xca, 0x58, 0xf5, 0x0d, 0x70, 0x1b, 0xe5, 0xa7, 0xd2, 0xad, 0x58, 0x71, 0x9b, 0xdc, 0xee, 0xaa,
	0x9a, 0xe5, 0x2e, 0x44, 0xdd, 0x67, 0x52, 0x57, 0x0c, 0x7d, 0x09, 0x92, 0x36, 0x1d, 0xe5, 0x46,
	0xd8, 0x80, 0xd3, 0x10, 0x3a, 0xa8, 0x3d, 0xa1, 0xb1, 0x2f, 0x76, 0x8d, 0xf0, 0x8a, 0xe7, 0x0d,
	0xf2, 0xcf, 0xe1, 0x81, 0x12, 0xe9, 0x64, 0x41, 0x63, 0xdf, 0x9d, 0x85, 0x94, 0x6f, 0xfc, 0xeb,
	0x6d, 0xa3, 0x3f, 0x09, 0x18, 0xed, 0xd7, 0xd0, 0x46, 0xfd, 0x33, 0x7a, 0x85, 0xc8, 0xdf, 0x54,
	0x91, 0x7d, 0x83, 0x1c, 0xc2, 0x6e, 0x89, 0xec, 0xbf, 0xfa, 0xd3, 0x9f, 0x47, 0x54, 0xfb, 0x0a,
	0xaa, 0x67, 0x74, 0x9d, 0x90, 0x1a, 0x97, 0xfe, 0xe0, 0x4a, 0xe9, 0xb6, 0x0e, 0xa0, 0xaa, 0xd5,
	0x92, 0xd9, 0xf0, 0x7b, 0x19, 0x52, 0x07, 0x7f, 0x40, 0xc4, 0x6f, 0x04, 0x7f, 0xaf, 0xbb, 0x28,
	0xb2, 0xfe, 0x35, 0x91, 0xb9, 0xa8, 0xff, 0x19, 0x5b, 0xb3, 0x1a, 0xfe, 0xc8, 0x3c, 0xfe, 0x27,
	0x00, 0x00, 0xff, 0xff, 0xef, 0xed, 0xeb, 0xaa, 0xda, 0x0c, 0x00, 0x00,
}
